- name: get list of all dashboards
  uri:
    url: "{{ grafana_url }}/api/search?query="
    user: "{{ grafana_username }}"
    password: "{{ grafana_password }}"
    force_basic_auth: yes
    body_format: json
    method: GET
    return_content: yes
    headers:
      Content-Type: "application/json;charset=UTF-8"
  register: result
  changed_when: no
  failed_when: false

- name: create required local dirs at {{ grafana_dashboards_local_path }}
  file: dest="{{ grafana_dashboards_local_path }}/{{ item }}"
        state=directory
  with_items: "{{ result.json|map(attribute='uri')|map('dirname')|unique|list }}"
  connection: local
  become: no

- name: find local dashboards
  find:
    paths: "{{ grafana_dashboards_local_path }}"
    file_type: file
    use_regex: yes
    recurse: yes
    patterns: ".*.json"
  register: local_dashboards
  connection: local
  become: no

- name: define dashboards variables
  set_fact:
    local_dashboards_paths: "{{ local_dashboards.files|map(attribute='path')|map('regex_replace', '^' + grafana_dashboards_local_path + '/?', '')|map('splitext')|map(attribute='0')|list }}"
    local_dashboards_by_path: {}
    local_dashboards_by_id: {}
    remote_dashboards_by_id: {}
    dashboards_to_download: {}
    dashboards_to_upload: {}
    # local_dashboards_to_delete: []

- name: fill local_dashboards_by_path
  set_fact:
    local_dashboards_by_path: "{{ local_dashboards_by_path|combine({item: lookup('file', (grafana_dashboards_local_path + '/' + item + '.json'))|from_json}) }}"
  with_items: "{{ local_dashboards_paths }}"

- include: local_dashboards_by_id.yml
  with_items: "{{ local_dashboards_by_path.keys() }}"

- debug: msg="{{ result.json|selectattr('id', 'equalto', 1)|list }}"

- include: remote_dashboards.yml
  vars:
    dash: "{{ item }}"
  with_items: "{{ result.json }}"

- name: add dashboards presented only locally to upload list
  set_fact:
    dashboards_to_upload: "{{ dashboards_to_upload|combine({ item: local_dashboards_by_id[item] }) }}"
  with_items: "{{ local_dashboards_by_id.keys()|difference(remote_dashboards_by_id.keys()) }}"

- name: add dashboards presented only remotly to download list
  set_fact:
    dashboards_to_download: "{{ dashboards_to_download|combine({ item: remote_dashboards_by_id[item] }) }}"
  with_items: "{{ remote_dashboards_by_id.keys()|difference(local_dashboards_by_id.keys()) }}"

- name: add local dashboards with higher version number to upload list
  set_fact:
    dashboards_to_upload: "{{ dashboards_to_upload|combine({ item: local_dashboards_by_id[item] }) }}"
  with_items: "{{ remote_dashboards_by_id.keys()|intersect(local_dashboards_by_id.keys()) }}"
  when: remote_dashboards_by_id[item] < local_dashboards_by_id[item]

- name: add remote dashboards with higher version number to download list
  set_fact:
    dashboards_to_download: "{{ dashboards_to_download|combine({ item: remote_dashboards_by_id[item] }) }}"
  with_items: "{{ remote_dashboards_by_id.keys()|intersect(local_dashboards_by_id.keys()) }}"
  when: remote_dashboards_by_id[item] > local_dashboards_by_id[item]

- name: "downloading:"
  debug: var=dashboards_to_download.values()|map(attribute='dashboard')|map(attribute='title')|list

- name: "uploading:"
  debug: var=dashboards_to_upload.values()|map(attribute='dashboard')|map(attribute='title')|list

- name: save local dashboards
  copy: dest="{{ grafana_dashboards_local_path }}/{{ item.path }}.json"
        content="{{ item.dashboard|to_nice_json }}"
  with_items: "{{ dashboards_to_download.values() }}"
  connection: local
  become: no

- include: upload.yml
  with_items: "{{ dashboards_to_upload.keys() }}"

- debug: msg="{{ 'test'|slug }}"
  failed_when: not (''|slug_test_pass)

- debug: msg="{{ 'test'|slug_test_pass }}"

